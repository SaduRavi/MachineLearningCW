}
for (x in 1:10) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(x),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.1)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Nodes:", x))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
}
for (x in 1:1) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(2),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.1)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Activation Function : Logistic"))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
}
for (x in 1:1) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(2),
data = trainingDataSet,
act.fct = "tanh",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.1)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Activation Function : tanh"))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
}
learning_rate = 0
for (x in 1:1) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(2),
data = trainingDataSet,
act.fct = "tanh",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.1)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Activation Function : tanh"))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
}
for (x in 1:1) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(2),
data = trainingDataSet,
act.fct = "tanh",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.1)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Activation Function : tanh"))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
}
for (x in 1:1) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(2),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.1)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Activation Function : logistic"))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
}
learning_rate = 0
while (learning_rate <= 0.1) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(2),
# hidden=c(6,6),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = learning_rate)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Learning Rate:", learning_rate))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
learning_rate = learning_rate + 0.02
}
for (x in 1:10) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(2,x),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.1)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Nodes: ", x))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
}
learning_rate = 0
while (learning_rate <= 0.1) {
model <- neuralnet(Eleven ~ Dates+Eleven,
hidden=c(5,2),
# hidden=c(6,6),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = learning_rate)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Learning Rate:", learning_rate))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
learning_rate = learning_rate + 0.02
}
for (x in 1:1) {
# the neural network model
model <- neuralnet(Eleven ~ Dates+Eleven,
hidden=c(5,2),
#hidden=c(5,x),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.1)
predicted = predict(model, testingDataSet)  # predicted output from the model
actual    = data.frame(testingDataSet)      # actual output
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Hidden Layer = c(5,2) "))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
}
for (x in 1:1) {
# the neural network model
model <- neuralnet(Eleven ~ Dates+Eleven,
hidden=c(5,2),
#hidden=c(5,x),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.1)
predicted = predict(model, testingDataSet)  # predicted output from the model
actual    = data.frame(testingDataSet)      # actual output
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Hidden Layer = c(5,2) "))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
}
for (x in 1:1) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(2,3),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.1)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Activation Function : logistic"))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
}
learning_rate = 0
for (x in 1:1) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(2,3),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.1)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Activation Function : logistic"))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
}
for (x in 1:1) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(2,3),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.1)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Activation Function : logistic"))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
}
for (x in 1:1) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(2,3),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.1)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Activation Function : logistic"))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
}
for (x in 1:1) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(2,3),
data = trainingDataSet,
act.fct = "tanh",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.1)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Activation Function : tanh"))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
}
learning_rate = 0
while (learning_rate <= 0.1) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
#hidden=c(2),
hidden=c(2,3),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = learning_rate)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Learning Rate:", learning_rate))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
learning_rate = learning_rate + 0.02
}
learning_rate = 0
while (learning_rate <= 0.1) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
#hidden=c(2),
hidden=c(2,3),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = learning_rate)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Learning Rate:", learning_rate))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
learning_rate = learning_rate + 0.02
}
learning_rate = 0
while (learning_rate <= 0.1) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
#hidden=c(2),
hidden=c(2,3),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = learning_rate)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Learning Rate:", learning_rate))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
learning_rate = learning_rate + 0.02
}
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(2),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.1)
predicted = predict(model, testingDataSet)  # predicted output from the model
actual    = data.frame(testingDataSet)      # actual output
plot(model)
testingDataSet$Number = seq.int(nrow(testingDataSet))
plot(testingDataSet$Number,testingDataSet$Eleven, main = "Actual VS Predicted", xlab = "Number",ylab = "Rate", col = "black", type = "l")
lines(testingDataSet$Number, predicted, col="red")
legend("bottomright",legend = c("Actual", "Predicted"),col = 1:2, lty = 1,cex = 0.50)
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(2,3),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.02)
predicted = predict(model, testingDataSet)  # predicted output from the model
actual    = data.frame(testingDataSet)      # actual output
plot(model)
testingDataSet$Number = seq.int(nrow(testingDataSet))
plot(testingDataSet$Number,testingDataSet$Eleven, main = "Actual VS Predicted", xlab = "Number",ylab = "Rate", col = "black", type = "l")
lines(testingDataSet$Number, predicted, col="red")
legend("bottomright",legend = c("Actual", "Predicted"),col = 1:2, lty = 1,cex = 0.50)
for (x in 1:1) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(2),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.1)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Hidden Layer c=(2)"))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
}
for (x in 1:1) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(2),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.1)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Hidden Layer c=(2)"))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
}
learning_rate = 0
for (x in 1:1) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(2),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.1)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Hidden Layer c=(2)"))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
}
for (x in 1:1) {
model <- neuralnet(Eleven ~ Dates+Eleven+Ten+Nine,
hidden=c(2,3),
data = trainingDataSet,
act.fct = "logistic",
linear.output = TRUE,
err.fct = "sse",
learningrate = 0.02)
predicted = predict(model, testingDataSet)
actual    = data.frame(testingDataSet)
mae  = round(mae (actual$Eleven, predicted) * 100, digits = 4)
rmse = round(rmse(actual$Eleven, predicted) * 100, digits = 4)
mape = round(MAPE(actual$Eleven, predicted) * 100, digits = 4)
print("****************************")
print(paste("Hidden Layer c=(2,3)"))
print(paste("MAE  : " , mae , " %" , sep = ""))
print(paste("RMSE : " , rmse, " %" , sep = ""))
print(paste("MAPE : " , mape, " %" , sep = ""))
print("****************************")
}
learning_rate = 0
